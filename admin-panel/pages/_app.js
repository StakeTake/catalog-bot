import '@/styles/globals.css';
import { useRouter } from 'next/router';
import Link from 'next/link';
import { useEffect, useState } from 'react';

const navItems = [
  { href: '/dashboard', label: 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞' },
  { href: '/productmanager', label: 'üì¶ –¢–æ–≤–∞—Ä—ã' },
  { href: '/categorymanager', label: 'üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏' },
  { href: '/payment', label: 'üí≥ –û–ø–ª–∞—Ç—ã' },
  { href: '/ordermanager', label: 'üìù –ó–∞–∫–∞–∑—ã' },
  { href: '/clientsettings', label: '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏' },
  { href: '/logout', label: 'üö™ –í—ã–π—Ç–∏', extraClass: 'text-red-400' },
];

export default function App({ Component, pageProps }) {
  const router = useRouter();
  const [sidebarOpen, setSidebarOpen] = useState(false);

  // –°–ø–∏—Å–æ–∫ –º–∞—Ä—à—Ä—É—Ç–æ–≤, –≥–¥–µ –ù–ï –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–∞–π—Ç–±–∞—Ä
  const noSidebarRoutes = ['/login'];

  // –ï—Å–ª–∏ –º–∞—Ä—à—Ä—É—Ç –≤ —ç—Ç–æ–º —Å–ø–∏—Å–∫–µ, —Å–∞–π—Ç–±–∞—Ä —Å–∫—Ä—ã–≤–∞–µ–º:
  const shouldHideSidebar = noSidebarRoutes.includes(router.pathname);

  // –°–ª–µ–¥–∏–º –∑–∞ —Ç–æ–∫–µ–Ω–æ–º, –Ω–æ —Ç–æ–ª—å–∫–æ –Ω–∞ –∫–ª–∏–µ–Ω—Ç–µ (useEffect)
  useEffect(() => {
    // –ï—Å–ª–∏ –º—ã –ù–ï –Ω–∞ /login, —Ç–æ–≥–¥–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–æ–∫–µ–Ω–∞
    if (!noSidebarRoutes.includes(router.pathname)) {
      const token = localStorage.getItem('token');
      if (!token) {
        router.push('/login');
      }
    }
  }, [router]);

  return (
    <div className="flex min-h-screen">
      {/* –°–∞–π—Ç–±–∞—Ä —Ä–µ–Ω–¥–µ—Ä–∏–º, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ shouldHideSidebar */}
      {!shouldHideSidebar && (
        <div
          className={`fixed inset-y-0 left-0 transform ${
            sidebarOpen ? 'translate-x-0' : '-translate-x-full'
          } transition duration-200 ease-in-out bg-gray-900 text-white w-64 z-50 md:relative md:translate-x-0`}
        >
          <div className="p-4">
            <h2 className="text-xl font-bold mb-4">–ê–¥–º–∏–Ω–∫–∞</h2>
            <nav>
              <ul className="space-y-2">
                {navItems.map((item) => (
                  <li key={item.href}>
                    <Link href={item.href}>
                      <span
                        className={`block p-2 rounded hover:bg-gray-700 ${
                          router.pathname === item.href ? 'bg-gray-700' : ''
                        } ${item.extraClass || ''}`}
                        onClick={() => setSidebarOpen(false)}
                      >
                        {item.label}
                      </span>
                    </Link>
                  </li>
                ))}
              </ul>
            </nav>
          </div>
        </div>
      )}

      {/* –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç –∑–∞–Ω–∏–º–∞–µ—Ç –æ—Å—Ç–∞–≤—à–µ–µ—Å—è –º–µ—Å—Ç–æ */}
      <div className={`flex-1 ${!shouldHideSidebar ? 'ml-64' : ''}`}>
        {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤ */}
        {!shouldHideSidebar && (
          <div className="md:hidden bg-gray-900 text-white p-4 flex items-center">
            <button
              onClick={() => setSidebarOpen(!sidebarOpen)}
              className="mr-4 focus:outline-none"
            >
              <svg
                className="w-6 h-6"
                fill="none"
                stroke="currentColor"
                viewBox="0 0 24 24"
                xmlns="http://www.w3.org/2000/svg"
              >
                <path
                  strokeLinecap="round"
                  strokeLinejoin="round"
                  strokeWidth="2"
                  d="M4 6h16M4 12h16M4 18h16"
                ></path>
              </svg>
            </button>
            <h1 className="text-lg font-bold">–ê–¥–º–∏–Ω–∫–∞</h1>
          </div>
        )}

        <main className="p-4">
          <Component {...pageProps} />
        </main>
      </div>
    </div>
  );
}
